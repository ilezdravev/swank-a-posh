<div class="wrapper">
	<div class="accordion">
		<div class="accordion__panel is-active">
			<div class="accordion__heading">
                <button class="accordion__btn">Product Details</button></div>
			<div class="accordion__content">
				<div class="accordion__inner">
					<p>{{product.metafields.custom.product_details}} </p>
				</div>
			</div>
		</div>
		<div class="accordion__panel">
			<div class="accordion__heading"><button class="accordion__btn">Sizing Details</button></div>
			<div class="accordion__content">
				<div class="accordion__inner">
					<p>{{product.metafields.custom.sizing_details }}</p>
				</div>
			</div>
		</div>
		<div class="accordion__panel">
			<div class="accordion__heading"><button class="accordion__btn">Shipping & Returns</button></div>
			<div class="accordion__content">
				<div class="accordion__inner">
					<p>{{product.metafields.custom.shipping_returns}} </p>
				</div>
			</div>
		</div>
	</div>
</div>

<style>

button {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  font-family: inherit;
  font-size: inherit;
  border: none;
  background: none;
  cursor: pointer;
}

.wrapper {
  margin-inline: auto;
  padding-top: 1rem;
  display: flex;
  flex-direction: column;
}

.accordion {
  width: 100%;
}
.accordion__panel {
  background-color: #fff;
  border-top: 2px solid #ECECECCF;
  border-bottom: 2px solid #ECECECCF;
  overflow: hidden;
  transition: height 0.5s ease-in-out;
}
.accordion__panel:first-of-type {
  border-top-left-radius: 0.25rem;
  border-top-right-radius: 0.25rem;
}
.accordion__panel:not(:first-of-type) {
  border-top: 0;
}
.accordion__panel:last-of-type {
  border-bottom-right-radius: 0.25rem;
  border-bottom-left-radius: 0.25rem;
}
.is-active .accordion__heading {
  box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.13);
}
.accordion__btn {
  display: flex;
  align-items: center;
  padding: 1rem 1.25rem;
  width: 100%;
}
.is-active .accordion__btn {
  /* background-color: var(--color-accent-x-light); */
  /* color: var(--color-accent); */
}
.accordion__btn::after {
  content: "";
  flex-shrink: 0;
  width: 1.25rem;
  height: 1.25rem;
  /* aspect-ratio: 1; */
  margin-left: auto;
  /* background-color: #000; */
  background-repeat: no-repeat;
  background-image: url("data:image/svg+xml,%3Csvg width='15' height='12' viewBox='0 0 15 12' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M13 2L7.5 9L2 2' stroke='%23D0D0D0' stroke-width='3' stroke-linecap='round'/%3E%3C/svg%3E");
  transition: transform 0.2s ease-in-out;
}
.is-active .accordion__btn::after {
  /* background-color: var(--color-accent); */
  transform: rotate(180deg);
}
.accordion__content {
  display: none;
  margin-top: -1px;
  transition: height 0.35s ease-in-out;
  overflow: hidden;
}
.is-active .accordion__content {
  display: block;
}
.accordion__inner {
  padding: 1rem 1.25rem;
}


</style>

<script defer>

const accordion = document.querySelector(".accordion");
const accordionPanels = document.querySelectorAll(".accordion__panel");
const accordionTriggers = document.querySelectorAll(".accordion__btn");
let speedAnimation = 300;

accordionTriggers.forEach((trigger) => {
	trigger.addEventListener("click", (e) => {
      debugger;
		let panel = trigger.parentNode.parentNode.querySelector(
			".accordion__content"
		);
		if (e.target.parentNode.parentNode.classList.contains("is-active")) {
			slideUp(panel, speedAnimation);

			panel.addEventListener(
				"transitionrun",
				() => {
					trigger.parentNode.parentNode.classList.remove("is-active");
				},
				{ once: true }
			);
		} else {
			// accordionPanels.forEach(function (item) {
			// 	if (item.classList.contains("is-active")) {
			// 		slideUp(item.querySelector(".accordion__content"), speedAnimation);

			// 		item.querySelector(".accordion__content").addEventListener(
			// 			"transitionrun",
			// 			() => {
			// 				item.classList.remove("is-active");
			// 			},
			// 			{ once: true }
			// 		);
			// 	}
			// });
			trigger.parentNode.parentNode.classList.add("is-active");
			slideDown(panel, speedAnimation);
		}
	});
});

/* Side Animation */
let slideUp = (target, duration = 500) => {
	target.style.transitionProperty = "height, margin, padding";
	target.style.transitionDuration = duration + "ms";
	target.style.boxSizing = "border-box";
	target.style.height = target.offsetHeight + "px";
	target.offsetHeight;
	target.style.overflow = "hidden";
	target.style.height = 0;
	target.style.paddingTop = 0;
	target.style.paddingBottom = 0;
	target.style.marginTop = 0;
	target.style.marginBottom = 0;
	window.setTimeout(() => {
		target.style.display = "none";
		target.style.removeProperty("height");
		target.style.removeProperty("padding-top");
		target.style.removeProperty("padding-bottom");
		target.style.removeProperty("margin-top");
		target.style.removeProperty("margin-bottom");
		target.style.removeProperty("overflow");
		target.style.removeProperty("transition-duration");
		target.style.removeProperty("transition-property");
		//alert("!");
	}, duration);
};

let slideDown = (target, duration = 500) => {
	target.style.removeProperty("display");
	let display = window.getComputedStyle(target).display;

	if (display === "none") display = "block";

	target.style.display = display;
	let height = target.offsetHeight;
	target.style.overflow = "hidden";
	target.style.height = 0;
	target.style.paddingTop = 0;
	target.style.paddingBottom = 0;
	target.style.marginTop = 0;
	target.style.marginBottom = 0;
	target.offsetHeight;
	target.style.boxSizing = "border-box";
	target.style.transitionProperty = "height, margin, padding";
	target.style.transitionDuration = duration + "ms";
	target.style.height = height + "px";
	target.style.removeProperty("padding-top");
	target.style.removeProperty("padding-bottom");
	target.style.removeProperty("margin-top");
	target.style.removeProperty("margin-bottom");
	window.setTimeout(() => {
		target.style.removeProperty("height");
		target.style.removeProperty("overflow");
		target.style.removeProperty("transition-duration");
		target.style.removeProperty("transition-property");
	}, duration);
};

let slideToggle = (target, duration = 500) => {
	if (window.getComputedStyle(target).display === "none") {
		return slideDown(target, duration);
	} else {
		return slideUp(target, duration);
	}
};

</script>